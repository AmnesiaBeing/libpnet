/// 该文件将解析Someip格式的报文，支持Someip、Someip-SD、Someip-TP三种类型。
/// 参考文档：
/// ① https://www.autosar.org/fileadmin/standards/R22-11/FO/AUTOSAR_PRS_SOMEIPProtocol.pdf
/// ② https://www.autosar.org/fileadmin/standards/R22-11/FO/AUTOSAR_PRS_SOMEIPServiceDiscoveryProtocol.pdf
/// 首先是Someip基本报文，由MessageID、Length、RequestID、ProtocolVersion、InterfaceVersion、MessageType、ReturnCode组成
/// 后续的payload按照不同的类型进行区分
/// TP类型报文，在MessageType字段有标志位进行区分
/// TP类型带有Offset、MoreSegmentsFlag，后接payload
/// SD类型报文，在MessageID中进行区分
/// SD类型报文，带有Flags、EntriesArrayLength、Entries、OptionsArrayLength、Options
use core::fmt;

use alloc::vec::Vec;

use pnet_macros::{packet, Packet};
use pnet_macros_support::{packet::*, types::*};

/// Constants
/// The currently supported protocol version.
pub const SOMEIP_PROTOCOL_VERSION: u8 = 1;

/// -----------------------------------------------------------------------------------------------
/// Someip Message Type
/// -----------------------------------------------------------------------------------------------

#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub mod SomeipMessageTypes {
    use super::SomeipMessageType;

    pub const Request: SomeipMessageType = SomeipMessageType(0x0);
    pub const RequestNoReturn: SomeipMessageType = SomeipMessageType(0x1);
    pub const Notification: SomeipMessageType = SomeipMessageType(0x2);
    pub const Response: SomeipMessageType = SomeipMessageType(0x80);
    pub const Error: SomeipMessageType = SomeipMessageType(0x81);
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct SomeipMessageType(pub u8);

impl SomeipMessageType {
    pub fn new(value: u8) -> SomeipMessageType {
        SomeipMessageType(value)
    }
}

impl PrimitiveValues for SomeipMessageType {
    type T = (u8,);
    fn to_primitive_values(&self) -> Self::T {
        (self.0,)
    }
}

impl fmt::Display for SomeipMessageType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                &SomeipMessageTypes::Request => "Request",
                &SomeipMessageTypes::RequestNoReturn => "RequestNoReturn",
                &SomeipMessageTypes::Notification => "Notication",
                &SomeipMessageTypes::Response => "Response",
                &SomeipMessageTypes::Error => "Error",
                _ => "unknown",
            }
        )
    }
}

/// -----------------------------------------------------------------------------------------------
/// Someip Return Code
/// -----------------------------------------------------------------------------------------------

#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub mod SomeipReturnCodes {
    use super::SomeipReturnCode;

    pub const E_OK: SomeipReturnCode = SomeipReturnCode(0x00);
    pub const E_NOK: SomeipReturnCode = SomeipReturnCode(0x01);
    pub const E_UNKNOWN_SERVICE: SomeipReturnCode = SomeipReturnCode(0x02);
    pub const E_UNKNOWN_METHOD: SomeipReturnCode = SomeipReturnCode(0x03);
    pub const E_NOT_READY: SomeipReturnCode = SomeipReturnCode(0x04);
    pub const E_NOT_REACHABLE: SomeipReturnCode = SomeipReturnCode(0x05);
    pub const E_TIMEOUT: SomeipReturnCode = SomeipReturnCode(0x06);
    pub const E_WRONG_PROTOCOL_VERSION: SomeipReturnCode = SomeipReturnCode(0x07);
    pub const E_WRONG_INTERFACE_VERSION: SomeipReturnCode = SomeipReturnCode(0x08);
    pub const E_MALFORMED_MESSAGE: SomeipReturnCode = SomeipReturnCode(0x09);
    pub const E_WRONG_MESSAGE_TYPE: SomeipReturnCode = SomeipReturnCode(0x0A);
    pub const E_E2E_REPEATED: SomeipReturnCode = SomeipReturnCode(0x0B);
    pub const E_E2E_WRONG_SEQUENCE: SomeipReturnCode = SomeipReturnCode(0x0C);
    pub const E_E2E: SomeipReturnCode = SomeipReturnCode(0x0D);
    pub const E_E2E_NOT_AVAILABLE: SomeipReturnCode = SomeipReturnCode(0x0E);
    pub const E_E2E_NO_NEW_DATA: SomeipReturnCode = SomeipReturnCode(0x0F);
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct SomeipReturnCode(pub u8);

impl SomeipReturnCode {
    pub fn new(value: u8) -> SomeipReturnCode {
        SomeipReturnCode(value)
    }
}

impl PrimitiveValues for SomeipReturnCode {
    type T = (u8,);
    fn to_primitive_values(&self) -> Self::T {
        (self.0,)
    }
}

impl fmt::Display for SomeipReturnCode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                &SomeipReturnCodes::E_OK => "E_OK",
                &SomeipReturnCodes::E_NOK => "E_NOK",
                &SomeipReturnCodes::E_UNKNOWN_SERVICE => "E_UNKNOWN_SERVICE",
                &SomeipReturnCodes::E_UNKNOWN_METHOD => "E_UNKNOWN_METHOD",
                &SomeipReturnCodes::E_NOT_READY => "E_NOT_READY",
                &SomeipReturnCodes::E_NOT_REACHABLE => "E_NOT_REACHABLE",
                &SomeipReturnCodes::E_TIMEOUT => "E_TIMEOUT",
                &SomeipReturnCodes::E_WRONG_PROTOCOL_VERSION => "E_WRONG_PROTOCOL_VERSION",
                &SomeipReturnCodes::E_WRONG_INTERFACE_VERSION => "E_WRONG_INTERFACE_VERSION",
                &SomeipReturnCodes::E_MALFORMED_MESSAGE => "E_MALFORMED_MESSAGE",
                &SomeipReturnCodes::E_WRONG_MESSAGE_TYPE => "E_WRONG_MESSAGE_TYPE",
                &SomeipReturnCodes::E_E2E_REPEATED => "E_E2E_REPEATED",
                &SomeipReturnCodes::E_E2E_WRONG_SEQUENCE => "E_E2E_WRONG_SEQUENCE",
                &SomeipReturnCodes::E_E2E => "E_E2E",
                &SomeipReturnCodes::E_E2E_NOT_AVAILABLE => "E_E2E_NOT_AVAILABLE",
                &SomeipReturnCodes::E_E2E_NO_NEW_DATA => "E_E2E_NO_NEW_DATA",
                _ => "unknown",
            }
        )
    }
}

/// -----------------------------------------------------------------------------------------------
/// Someip Packet
/// -----------------------------------------------------------------------------------------------

// #[derive(Packet, Debug)]
#[packet]
pub struct Someip {
    #[construct_with(u16)]
    pub service_id: u16be,
    #[construct_with(u16)]
    pub method_id: u16be,
    #[construct_with(u32)]
    pub length: u32be,
    #[construct_with(u16)]
    pub client_id: u16be,
    #[construct_with(u16)]
    pub session_id: u16be,
    #[construct_with(u8)]
    pub protocol_version: u8,
    #[construct_with(u8)]
    pub interface_version: u8,
    #[construct_with(u8)]
    pub message_type: SomeipMessageType,
    #[construct_with(u8)]
    pub return_code: SomeipReturnCode,
    #[payload]
    #[length_fn = "someip_length"]
    pub payload: Vec<u8>,
}

fn someip_length(pkt: &SomeipPacket) -> usize {
    if pkt.get_length() > 8 {
        (pkt.get_length() - 8) as usize
    } else {
        0
    }
}

#[test]
fn one_someip_packet_detect() {
    use pnet_macros_support::packet::Packet;
    use std::println;
    let packet = [
        0x10, 0x49, 0x90, 0x0d, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x4e, 0xcd, 0x01, 0x01, 0x02,
        0x00, 0x00,
    ];
    let someippkt = SomeipPacket::new(&packet[..]).unwrap();
    println!("service_id:{:?}", someippkt.get_service_id());
    println!("method_id:{:?}", someippkt.get_method_id());
    println!("length:{:?}", someippkt.get_length());
    println!("client_id:{:?}", someippkt.get_client_id());
    println!("session_id:{:?}", someippkt.get_session_id());
    println!("protocol_version:{:?}", someippkt.get_protocol_version());
    println!("interface_version:{:?}", someippkt.get_interface_version());
    println!("message_type:{:?}", someippkt.get_message_type());
    println!("return_code:{:?}", someippkt.get_return_code());
    println!("payload:{:?}", someippkt.payload());
    println!("packet_size:{:?}", someippkt.packet_size());
}

// / -----------------------------------------------------------------------------------------------
// / Someip SD Entry
// / -----------------------------------------------------------------------------------------------

#[derive(Packet, Debug)]
pub struct SomeipSdEntry {
    pub sd_entry_type: u8,
    pub index_of_1st_options_run: u8,
    pub index_of_2nd_options_run: u8,
    pub number_of_options_1: u4,
    pub number_of_options_2: u4,
    pub service_id: u16be,
    pub instance_id: u16be,
    pub major_version: u8,
    pub ttl: u24be,
    pub minor_version: u32be,
    // pub reserved: u12be,
    // pub counter: u4,
    // pub eventgroup_id: u16be,
    #[payload]
    #[length = "0"]
    pub unused: Vec<u8>,
}

// / -----------------------------------------------------------------------------------------------
// / Someip SD Option （这里不需要关心Option的具体内容，有需要的兄弟后续自己补充吧）
// / -----------------------------------------------------------------------------------------------

// #[derive(Packet, Debug)]
// pub struct SomeipSdOption {
//     pub length: u16be,
//     #[payload]
//     #[length = "length"]
//     pub payload: Vec<u8>,
// }

// / -----------------------------------------------------------------------------------------------
// / Someip SD Packet (Without Someip Packet Header)
// / -----------------------------------------------------------------------------------------------

#[derive(Packet, Debug)]
pub struct SomeipSd {
    pub flags: u8,
    pub reserved: u24be,
    pub entries_length: u32be,
    #[length = "entries_length"]
    pub entries: Vec<SomeipSdEntry>,
    pub options_length: u32be,
    // #[length = "options_length"]
    // pub options: Vec<SomeipSdOption>,
    #[payload]
    #[length = "options_length"]
    pub unused: Vec<u8>,
}

#[test]
fn one_someip_sd_packet_detect() {
    // use pnet_macros_support::packet::Packet;
    use std::println;
    let packet = [
        // 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x05, 0x74, 0x00, 0x00, 0x0c, 0xbe, 0x01, 0x01, 0x02,
        // 0x00,
        0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x01, 0x00, 0x00, 0x10, 0x10, 0xc8, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xd0,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10,
        0xd2, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x10, 0xd3, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00,
        0x10, 0x10, 0xd4, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02,
        0x00, 0x10, 0x10, 0xd5, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x03, 0x00, 0x10, 0x10, 0xd8, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x04, 0x00, 0x10, 0x10, 0xd9, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x05, 0x00, 0x10, 0x10, 0xda, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x06, 0x00, 0x10, 0x10, 0xdc, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x07, 0x00, 0x10, 0x10, 0xdd, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe0, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe1, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe6, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe8, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe9, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xea,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10,
        0xeb, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x10, 0xec, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x10, 0xed, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x08,
        0x00, 0x10, 0x10, 0xee, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x09, 0x00, 0x10, 0x10, 0xef, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x10, 0xf0, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf1, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf2, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x0a, 0x00, 0x10, 0x10, 0xf4, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x0b, 0x00, 0x10, 0x10, 0xf5, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0c, 0x00, 0x10, 0x10, 0xf6, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf7, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0d, 0x00, 0x10, 0x10, 0xf8, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf9, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0e, 0x00, 0x10, 0x10, 0xfa,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10,
        0xfb, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0f, 0x00, 0x10,
        0x10, 0xfc, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x11, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x11, 0x03, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x11, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x18, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0c, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0d, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0e, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0f, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x10, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x11, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x12, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x13, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x14,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18,
        0x15, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x18, 0x16, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x18, 0x17, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x18, 0x18, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x18, 0x19, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x18, 0x1a, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x1b, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x21, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x2d, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x2e, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x30, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x3c, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x48, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x4b, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x56,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18,
        0x57, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x18, 0x59, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x18, 0x6c, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x18, 0x6f, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x18, 0x88, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x18, 0xe1, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x02, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x06, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x0a, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x0c, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x09, 0x04, 0x00,
        0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x2a, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42,
        0x4f, 0x00, 0x11, 0xc3, 0xb0, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11,
        0xc3, 0xb1, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x25, 0x00,
        0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe3, 0x00, 0x09, 0x04, 0x00,
        0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe2, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42,
        0x4f, 0x00, 0x06, 0x77, 0x45, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x06,
        0x77, 0x44, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe5, 0x00,
        0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x06, 0xc4, 0x3a, 0x00, 0x09, 0x04, 0x00,
        0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0x3d, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42,
        0x4f, 0x00, 0x11, 0xc4, 0x3e, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11,
        0xc4, 0x3b, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0x3c, 0x00,
        0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x06, 0x77, 0x67, 0x00, 0x09, 0x04, 0x00,
        0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x67,
    ];
    let someipsdpkt = SomeipSdPacket::new(&packet[..]).unwrap();
    println!("flags:{:?}", someipsdpkt.get_flags());
    println!("entries_length:{:?}", someipsdpkt.get_entries_length());
    println!("entry[0]:{:?}", someipsdpkt.get_entries()[0]);
    println!("entry[1]:{:?}", someipsdpkt.get_entries()[1]);
    println!("options_length:{:?}", someipsdpkt.get_options_length());
    println!("packet_size:{:?}", someipsdpkt.packet_size());
    println!("----------------");
    println!(
        "entry[1].serviceid:{:?}",
        someipsdpkt.get_entries()[1].service_id
    )
}

// / -----------------------------------------------------------------------------------------------
// / Multi Someip Packet
// / -----------------------------------------------------------------------------------------------

#[derive(Packet, Debug)]
pub struct MultiSomeip {
    #[length_fn = "multi_someip_length"]
    pub someip: Vec<Someip>,
    #[payload]
    #[length = "0"]
    pub unused: Vec<u8>,
}

fn multi_someip_length(pkt: &MultiSomeipPacket) -> usize {
    pkt.packet().len()
}

#[test]
fn multi_someip_packets_detect() {
    // use pnet_macros_support::packet::Packet;
    use std::println;
    let pkts = [
        0x10, 0x4a, 0x90, 0x0b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0xa7, 0x00, 0x01, 0x01, 0x02,
        0x00, 0x01, 0x10, 0x4a, 0x90, 0x0d, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0xa7, 0x01, 0x01,
        0x01, 0x02, 0x00, 0x01,
    ];
    let someippkts = MultiSomeipPacket::new(&pkts[..]).unwrap();
    println!("{:?}", someippkts.get_someip_raw());
    let mut iter = someippkts.get_someip_iter();
    println!("msg1:{:?}", iter.next().unwrap());
    println!("msg2:{:?}", iter.next().unwrap());
}
